{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Euler Graph Database","text":""},{"location":"#introduction-to-euler-graph-database","title":"Introduction to Euler Graph Database","text":"<p>The Euler Graph Database is a knowledge graph viewer that allows users to create, visualize, and manage knowledge graphs. It provides an interactive graphical user interface (GUI) for performing various operations on the knowledge graph such as adding nodes and edges, executing queries, and visualizing the graph. Additionally, it includes features like embedding, path finding, and tokenization that help you build a complete Graph-based Retrieval Augmented Generation (GraphRAG) system. You can also visualize the graphs directly from your terminal by typing <code>eulerdb</code>.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Interactive GUI: A user-friendly interface for managing knowledge graphs.</li> <li>Node and Edge Management: Easily add, edit, and delete nodes and edges in your graph.</li> <li>Query Execution: Perform complex queries to retrieve and analyze graph data.</li> <li>Graph Visualization: Visualize your knowledge graphs to better understand the relationships and structure.</li> <li>Embedding: Generate embeddings for nodes to facilitate advanced graph-based analysis.</li> <li>Path Finding: Implement algorithms to find paths between nodes.</li> <li>Tokenization: Tokenize graph data for various processing tasks.</li> <li>GraphRAG: Build and utilize Graph-based Retrieval Augmented Generation systems.</li> </ul>"},{"location":"#building-knowledge-graphs","title":"Building Knowledge Graphs \ud83c\udf10","text":"<p>Using the provided classes, you can build comprehensive knowledge graphs. These graphs can help in organizing information, discovering relationships, and enhancing data analysis.</p>"},{"location":"#benefits","title":"Benefits:","text":"<ul> <li>Organized Data: Represent your data in an easily understandable graph format.</li> <li>Relationship Discovery: Identify and explore relationships between different data points.</li> <li>Enhanced Analysis: Use graph-based analysis techniques to gain deeper insights into your data.</li> </ul>"},{"location":"#graphrag-graph-based-retrieval-augmented-generation","title":"GraphRAG (Graph-based Retrieval Augmented Generation) \ud83d\ude80","text":"<p>GraphRAG is a powerful technique that leverages knowledge graphs to enhance information retrieval and generation processes. By building and utilizing knowledge graphs, GraphRAG can provide more accurate and contextually relevant information.</p>"},{"location":"#benefits_1","title":"Benefits:","text":"<ul> <li>Improved Retrieval: Enhance search and retrieval processes by leveraging the structure and relationships in knowledge graphs.</li> <li>Contextual Generation: Generate contextually relevant information based on the interconnected data within the graph.</li> <li>Advanced Insights: Use the power of knowledge graphs to derive insights that are not possible with traditional retrieval methods.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>To install Euler Graph Database, you can use the following commands:</p> <pre><code>pip install eulerdb\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with the Euler Graph Database, follow these steps:</p> <pre><code>from my_graph_lib.graph_api import KnowledgeGraphAPI\nfrom my_graph_lib.faiss_db import FaissVectorDB\n\n# Initialize API and Vector DB\napi = KnowledgeGraphAPI()\nvector_db = FaissVectorDB(dimension=64)\n</code></pre>"},{"location":"#create-nodes","title":"Create nodes","text":"<p>Create Graph nodes </p> <pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\napi.create_node(id='4', label='Person', properties={'name': 'David', 'age': 40})\napi.create_node(id='5', label='Person', properties={'name': 'Eve', 'age': 28})\n</code></pre>"},{"location":"#create-edges","title":"Create edges","text":"<p>Create Graph Edges</p> <pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-4', source='3', target='4', label='knows', properties={'since': '2015'})\napi.create_edge(id='4-5', source='4', target='5', label='knows', properties={'since': '2021'})\napi.create_edge(id='5-1', source='5', target='1', label='knows', properties={'since': '2019'})\n</code></pre>"},{"location":"#generate-embeddings","title":"Generate embeddings","text":"<p>Apply Embeddding on graphs</p> <pre><code>api.graph.generate_embeddings(method=\"simple\", dimensions=64)\nembeddings = {node_id: api.graph.get_embedding(node_id) for node_id in api.graph.nodes}\nvector_db.add_vectors(list(embeddings.values()), list(map(int, embeddings.keys())))\n</code></pre>"},{"location":"#query-embeddings","title":"Query embeddings","text":"<pre><code>query_results = vector_db.query_vectors(api.graph.get_embedding('1'), k=2)\nprint(\"Query results:\", query_results)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p><code>docs/installation.md</code>:</p>"},{"location":"installation/#introduction-i","title":"Introduction \u2139\ufe0f","text":"<p>The Euler Graph Database is a knowledge graph viewer that allows users to create, visualize, and manage knowledge graphs. It provides an interactive graphical user interface (GUI) for performing various operations on the knowledge graph such as adding nodes and edges, executing queries, and visualizing the graph.</p>"},{"location":"installation/#installation","title":"Installation \ud83d\udcbb","text":"<ol> <li>Install the Package: <pre><code>    pip install euler_database\n</code></pre></li> </ol>"},{"location":"installation/#running-the-application","title":"Running the Application \ud83d\ude80","text":"<p>To run the application, use the following command: <pre><code>eulerdb\n</code></pre></p>"},{"location":"installation/#user-guide","title":"User Guide \ud83d\udcdd","text":""},{"location":"installation/#main-interface","title":"Main Interface \ud83d\udda5\ufe0f","text":"<p>The main interface of the application consists of the following components: - Header: Displays the application name and logo. - Navbar: Provides options to load, visualize, add nodes, add edges, save the graph, and display help/about information. - Query Entry: A text area to enter queries. - Buttons:      - <code>Execute Query</code>: Executes the entered query.     - <code>Save Query</code>: Saves the entered queries to a file.     - <code>Load Query</code>: Loads queries from a file. - Output Areas:     - <code>Query Output</code>: Displays the results of executed queries.     - <code>JSON Output</code>: Displays the JSON representation of the current graph.</p>"},{"location":"installation/#loading-a-graph","title":"Loading a Graph \ud83d\udcc2","text":"<ol> <li>Click on the <code>Load Graph</code> button in the navbar.</li> <li>Select the file containing the graph you want to load.</li> </ol>"},{"location":"installation/#visualizing-a-graph","title":"Visualizing a Graph \ud83d\udd0d","text":"<ol> <li>After loading a graph, click on the <code>Visualize Graph</code> button in the navbar.</li> <li>The graph will be displayed in the visualization area.</li> </ol>"},{"location":"installation/#adding-nodes","title":"Adding Nodes \u2795","text":"<ol> <li>Click on the <code>Add Node</code> button in the navbar.</li> <li>Enter the node ID and label in the prompt that appears.</li> <li>The node will be added to the graph.</li> </ol>"},{"location":"installation/#adding-edges","title":"Adding Edges \ud83d\udd17","text":"<ol> <li>Click on the <code>Add Edge</code> button in the navbar.</li> <li>Enter the edge ID, source node ID, target node ID, and edge label in the prompt that appears.</li> <li>The edge will be added to the graph.</li> </ol>"},{"location":"installation/#saving-a-graph","title":"Saving a Graph \ud83d\udcbe","text":"<ol> <li>Click on the <code>Save Graph</code> button in the navbar.</li> <li>Choose the location to save the graph file.</li> </ol>"},{"location":"installation/#executing-queries","title":"Executing Queries \ud83d\udccb","text":"<ol> <li>Enter your query in the <code>Query Entry</code> area.</li> <li>Click the <code>Execute Query</code> button.</li> <li>The result of the query will be displayed in the <code>Query Output</code> area.</li> </ol>"},{"location":"installation/#saving-queries","title":"Saving Queries \ud83d\udcbc","text":"<ol> <li>Enter your queries in the <code>Query Entry</code> area.</li> <li>Click the <code>Save Query</code> button.</li> <li>Choose the location to save the queries file (with <code>.euler</code> extension).</li> </ol>"},{"location":"installation/#loading-queries","title":"Loading Queries \ud83d\udcc4","text":"<ol> <li>Click the <code>Load Query</code> button.</li> <li>Select the file containing the queries.</li> <li>The queries will be loaded into the <code>Query Entry</code> area.</li> </ol>"},{"location":"installation/#example","title":"Example:","text":"<pre><code>from euler.graph_api import KnowledgeGraphAPI\nfrom euler.query_parser import QueryParser\nfrom euler.query_executor import QueryExecutor\n\n# Initialize API and related components\napi = KnowledgeGraphAPI()\nparser = QueryParser(api.graph)\nexecutor = QueryExecutor(api.graph)\n\n# Add nodes and edges\napi.create_node('1', 'Person', {'name': 'Alice'})\napi.create_node('2', 'Person', {'name': 'Bob'})\napi.create_edge('1', '1', '2', 'knows')\n\n# Query the graph\nresult = executor.execute_query('FIND (n)-[r]-&gt;(m)')\nprint(result)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p><code>usage.md</code>:</p> <p>```markdown</p>"},{"location":"usage/#usage","title":"Usage","text":"<p>This section provides examples of how to use My Graph Library.</p>"},{"location":"usage/#quick-start","title":"Quick Start","text":"<p>```python from my_graph_lib.graph_api import KnowledgeGraphAPI from my_graph_lib.faiss_db import FaissVectorDB</p> <p>api = KnowledgeGraphAPI() vector_db = FaissVectorDB(dimension=64)</p> <p>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})</p>"},{"location":"usage/#add-more-nodes-and-edges","title":"Add more nodes and edges...","text":"<p>api.graph.generate_embeddings(method=\"simple\", dimensions=64) embeddings = {node_id: api.graph.get_embedding(node_id) for node_id in api.graph.nodes} vector_db.add_vectors(list(embeddings.values()), list(map(int, embeddings.keys())))</p> <p>query_results = vector_db.query_vectors(api.graph.get_embedding('1'), k=2) print(\"Query results:\", query_results)</p>"},{"location":"api_reference/embeddings/node2vec/","title":"Node2Vec Graph Embeddings","text":""},{"location":"api_reference/embeddings/node2vec/#introduction","title":"Introduction","text":"<p>Node2Vec is a popular algorithm for generating vector representations of nodes in a graph. It aims to capture the network structure by performing biased random walks on the graph and then applying the Skip-Gram model from natural language processing to generate node embeddings. These embeddings can be used for various downstream tasks such as node classification, link prediction, and clustering.</p>"},{"location":"api_reference/embeddings/node2vec/#mathematical-definition","title":"Mathematical Definition","text":"<p>Given a graph ( G = (V, E) ), where ( V ) is the set of vertices and ( E ) is the set of edges, Node2Vec generates embeddings by optimizing the following objective function: <pre><code>\\[ \\max \\sum_{u \\in V} \\sum_{v \\in N_S(u)} \\log \\Pr(v | u) \\]\n</code></pre> where ( N_S(u) ) is a set of nodes sampled from random walks starting at node ( u ), and ( \\Pr(v | u) ) is the conditional probability of node ( v ) given node ( u ).</p>"},{"location":"api_reference/embeddings/node2vec/#conditional-probability","title":"Conditional Probability","text":"<p>The conditional probability ( \\Pr(v | u) ) is defined using the Softmax function: <pre><code>\\[ \\Pr(v | u) = \\frac{\\exp(\\mathbf{z}_v \\cdot \\mathbf{z}_u)}{\\sum_{v' \\in V} \\exp(\\mathbf{z}_{v'} \\cdot \\mathbf{z}_u)} \\]\n</code></pre> where ( \\mathbf{z}_u ) and ( \\mathbf{z}_v ) are the embedding vectors of nodes ( u ) and ( v ), respectively.</p>"},{"location":"api_reference/embeddings/node2vec/#random-walks","title":"Random Walks","text":"<p>Node2Vec generates random walks to capture the graph structure. These walks are controlled by two parameters:</p> <ul> <li>Return parameter ( p ): Controls the likelihood of returning to the previous node in the walk.</li> <li>In-out parameter ( q ): Controls the likelihood of exploring outward nodes.</li> </ul>"},{"location":"api_reference/embeddings/node2vec/#transition-probability","title":"Transition Probability","text":"<p>The transition probability from node ( t ) to node ( v ) given the previous node ( s ) is defined as: <pre><code>\\[ \\alpha_{pq}(t, v) = \n\\begin{cases} \n1/p &amp; \\text{if } d_{t,v} = 0 \\\\\n1 &amp; \\text{if } d_{t,v} = 1 \\\\\n1/q &amp; \\text{if } d_{t,v} = 2 \n\\end{cases}\n\\]\n</code></pre> where ( d_{t,v} ) is the shortest path distance between nodes ( t ) and ( v ).</p>"},{"location":"api_reference/embeddings/node2vec/#skip-gram-model","title":"Skip-Gram Model","text":"<p>The Skip-Gram model is used to optimize the embeddings by maximizing the probability of observing a node's neighbors in random walks. The objective function is: <pre><code>\\[ \\max \\sum_{u \\in V} \\sum_{v \\in N_S(u)} \\log \\Pr(v | u) \\]\n</code></pre></p>"},{"location":"api_reference/embeddings/node2vec/#example-code","title":"Example Code","text":"<p>Below is an example code that demonstrates how to generate Node2Vec embeddings using the <code>node2vec</code> Python package.</p> <pre><code>from euler.graph_api import KnowledgeGraphAPI\napi = KnowledgeGraphAPI()\n</code></pre>"},{"location":"api_reference/embeddings/node2vec/#create-more-nodes","title":"Create more nodes","text":"<pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\n</code></pre>"},{"location":"api_reference/embeddings/node2vec/#create-edges","title":"Create edges","text":"<pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-1', source='3', target='4', label='knows', properties={'since': '2015'})\n</code></pre>"},{"location":"api_reference/embeddings/node2vec/#convert-graph-into-graph","title":"convert graph into Graph  <pre><code>network_graph = api.graph.to_networkx()\n</code></pre>","text":""},{"location":"api_reference/embeddings/node2vec/#create-node2vec-embeddings","title":"Create Node2Vec Embeddings <pre><code>api.graph.generate_embeddings(network_graph, method=\"node2vec\", dimensions=64, walk_length=30, num_walks=200, workers=4)\nnode2vec_embedding = api.graph.get_embedding('1')\nprint(\"Node2Vec embedding for node '1':\", node2vec_embedding)\n</code></pre>","text":""},{"location":"api_reference/embeddings/simple/","title":"Simple Graph Embeddings","text":""},{"location":"api_reference/embeddings/simple/#introduction","title":"Introduction","text":"<p>Graph embeddings are a way of representing graph nodes, edges, or entire graphs as vectors in a continuous vector space. This transformation allows the application of various machine learning algorithms directly on the graph data. The goal of graph embeddings is to capture the graph's structural and relational information in a lower-dimensional space.</p>"},{"location":"api_reference/embeddings/simple/#mathematical-definition","title":"Mathematical Definition","text":"<p>Given a graph ( G = (V, E) ), where ( V ) is the set of vertices and ( E ) is the set of edges, a graph embedding is a function ( f: V \\rightarrow \\mathbb{R}^d ) that maps each node to a ( d )-dimensional vector.</p>"},{"location":"api_reference/embeddings/simple/#objective","title":"Objective","text":"<p>The objective of graph embedding is to ensure that nodes that are close in the graph are also close in the embedding space. This can be mathematically formulated as minimizing the following objective function: <pre><code>\\[ \\min \\sum_{(u, v) \\in E} \\text{distance}(f(u), f(v)) \\]\n</code></pre> where ( \\text{distance} ) is typically the Euclidean distance between the vectors ( f(u) ) and ( f(v) ).</p>"},{"location":"api_reference/embeddings/simple/#simple-embeddings","title":"Simple Embeddings","text":"<p>A simple approach to generate graph embeddings is to use random embeddings or basic aggregation techniques. One such technique is to initialize each node's embedding randomly and then optimize it using gradient descent to minimize the objective function.</p>"},{"location":"api_reference/embeddings/simple/#random-initialization","title":"Random Initialization","text":"<pre><code>For a graph with \\( N \\) nodes, initialize a matrix \\( W \\in \\mathbb{R}^{N \\times d} \\) where each entry \\( W_{i,j} \\) is sampled from a normal distribution \\( \\mathcal{N}(0, \\sigma^2) \\).\n</code></pre>"},{"location":"api_reference/embeddings/simple/#optimization","title":"Optimization","text":"<p>The embeddings can be further refined using optimization techniques such as stochastic gradient descent (SGD) to minimize the objective function.</p>"},{"location":"api_reference/embeddings/simple/#example-code","title":"Example Code","text":"<p>Below is an example code that demonstrates how to generate simple graph embeddings using random initialization.</p> <pre><code>from euler.graph_api import KnowledgeGraphAPI\napi = KnowledgeGraphAPI()\n</code></pre>"},{"location":"api_reference/embeddings/simple/#create-more-nodes","title":"Create more nodes","text":"<pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\n</code></pre>"},{"location":"api_reference/embeddings/simple/#create-edges","title":"Create edges","text":"<pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-1', source='3', target='4', label='knows', properties={'since': '2015'})\n</code></pre>"},{"location":"api_reference/embeddings/simple/#convert-graph-into-graph","title":"convert graph into Graph  <pre><code>network_graph = api.graph.to_networkx()\n</code></pre>","text":""},{"location":"api_reference/embeddings/simple/#generate-a-simple-embeddings","title":"Generate a simple embeddings <pre><code>api.graph.generate_embeddings(network_graph, method=\"simple\", dimensions=64)\nsimple_embedding = api.graph.get_embedding('1')\nprint(\"Simple embedding for node '1':\", simple_embedding)\n</code></pre>","text":""},{"location":"api_reference/llm/gemini/","title":"Gemini LLM","text":""},{"location":"api_reference/llm/huggingface/","title":"HugginFace","text":""},{"location":"api_reference/readers/pdf/","title":"PDFReader","text":""},{"location":"api_reference/readers/pdf/#overview","title":"Overview","text":"<p>The <code>PDFReader</code> class is designed to read PDF files and convert each page into a <code>Document</code> object. This class is part of the Euler Graph Database and extends the <code>BaseReader</code> class.</p>"},{"location":"api_reference/readers/pdf/#arguments","title":"Arguments","text":"<ul> <li><code>file</code> (Path): Path to the PDF file to load.</li> <li><code>extra_info</code> (Optional[Dict]): Additional metadata to include with each document.</li> </ul>"},{"location":"api_reference/readers/pdf/#example-usage","title":"Example Usage","text":"<p>Here's an example demonstrating how to use the <code>PDFReader</code> class:</p> <pre><code>from pathlib import Path\nfrom euler.reader.pdf_reader import PDFReader\n</code></pre>"},{"location":"api_reference/readers/pdf/#initialize-the-pdfreader","title":"Initialize the PDFReader","text":"<pre><code>reader = PDFReader()\n</code></pre>"},{"location":"api_reference/readers/pdf/#load-the-documents-from-the-pdf-file-with-additional-metadata","title":"Load the documents from the PDF file with additional metadata","text":"<pre><code>documents = reader.load(Path(\"example.pdf\"), extra_info={\"author\": \"John Doe\"})\n</code></pre>"},{"location":"api_reference/readers/pdf/#print-the-loaded-documents","title":"#Print the loaded documents","text":"<pre><code>for doc in documents:\n    print(doc.text)\n    print(doc.metadata)\n</code></pre>"},{"location":"api_reference/readers/text/","title":"TextReader","text":""},{"location":"api_reference/readers/text/#overview","title":"Overview","text":"<p>The <code>TextReader</code> class is designed to read text files with specified encoding. It can optionally autodetect file encoding if the specified encoding fails. This class is part of the Euler Graph Database and extends the <code>BaseReader</code> class.</p>"},{"location":"api_reference/readers/text/#arguments","title":"Arguments","text":"<ul> <li><code>file_path</code> (str): Path to the file to load.</li> <li><code>encoding</code> (Optional[str]): File encoding to use. If <code>None</code>, the file will be loaded with the default system encoding.</li> <li><code>autodetect_encoding</code> (bool): Whether to try to autodetect the file encoding if the specified encoding fails. Default is <code>False</code>.</li> </ul>"},{"location":"api_reference/readers/text/#example-usage","title":"Example Usage","text":"<p>Here's an example demonstrating how to use the <code>TextReader</code> class:</p> <pre><code>from euler.reader.text_reader import TextReader\n</code></pre>"},{"location":"api_reference/readers/text/#initialize-the-textreader-with-file-path-encoding-and-autodetect_encoding","title":"Initialize the TextReader with file path, encoding, and autodetect_encoding","text":"<pre><code>reader = TextReader(file_path=\"example.txt\", encoding=\"utf-8\", autodetect_encoding=True)\n</code></pre>"},{"location":"api_reference/readers/text/#load-the-document","title":"Load the document","text":"<pre><code>documents = reader.load()\n</code></pre>"},{"location":"api_reference/readers/text/#print-the-loaded-documents","title":"Print the loaded documents","text":"<pre><code>for doc in documents:\n    print(doc.text)\n    print(doc.metadata)\n</code></pre>"},{"location":"api_reference/readers/xlsx/","title":"ReadXlsx","text":""},{"location":"api_reference/readers/xlsx/#overview","title":"Overview","text":"<p>The <code>ReadXlsx</code> class is designed to read Excel files (<code>.xlsx</code>) and convert each row into a <code>Document</code> object. This class is part of the Euler Graph Database and extends the <code>BaseReader</code> class.</p>"},{"location":"api_reference/readers/xlsx/#arguments","title":"Arguments","text":"<ul> <li><code>file_path</code> (str): Path to the Excel file to load.</li> <li><code>source_column</code> (Optional[str]): The column name to use as the source identifier in the metadata. If <code>None</code>, the file path will be used as the source.</li> <li><code>sheet_name</code> (Optional[str]): The name of the sheet to load. If <code>None</code>, the first sheet will be used.</li> <li><code>encoding</code> (Optional[str]): The encoding to use for reading the file. This parameter is not typically needed for Excel files.</li> </ul>"},{"location":"api_reference/readers/xlsx/#example-usage","title":"Example Usage","text":"<p>Here's an example demonstrating how to use the <code>ReadXlsx</code> class:</p> <pre><code>from euler.reader.xlsx_reader import ReadXlsx\n</code></pre>"},{"location":"api_reference/readers/xlsx/#initialize-the-readxlsx-with-file-path-source-column-and-sheet-name","title":"Initialize the ReadXlsx with file path, source column, and sheet name","text":"<pre><code>reader = ReadXlsx(file_path=\"example.xlsx\", source_column=\"Source\", sheet_name=\"Sheet1\")\n</code></pre>"},{"location":"api_reference/readers/xlsx/#load-the-documents","title":"Load the documents","text":"<pre><code>documents = reader.load()\n</code></pre>"},{"location":"api_reference/readers/xlsx/#print-the-loaded-documents","title":"Print the loaded documents","text":"<pre><code>for doc in documents:\n    print(doc.text)\n    print(doc.metadata)\n</code></pre>"},{"location":"api_reference/vector_store/chroma/","title":"Chroma Vector DB","text":""},{"location":"api_reference/vector_store/faiss/","title":"Faiss Vector DB","text":""},{"location":"api_reference/vector_store/milvus/","title":"Milvus Vector DB","text":""},{"location":"api_reference/vector_store/pinecone/","title":"Pinecone Vector DB","text":""}]}