{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Euler Graph Database","text":"<p>Welcome to the official documentation for the Euler Graph Database.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Manage nodes and edges in a graph</li> <li>Generate embeddings using various methods</li> <li>Store and query embeddings using FAISS</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with the Euler Graph Database, follow these steps:</p> <pre><code>from my_graph_lib.graph_api import KnowledgeGraphAPI\nfrom my_graph_lib.faiss_db import FaissVectorDB\n\n# Initialize API and Vector DB\napi = KnowledgeGraphAPI()\nvector_db = FaissVectorDB(dimension=64)\n</code></pre>"},{"location":"#create-nodes","title":"Create nodes","text":"<p>Create Graph nodes </p> <pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\napi.create_node(id='4', label='Person', properties={'name': 'David', 'age': 40})\napi.create_node(id='5', label='Person', properties={'name': 'Eve', 'age': 28})\n</code></pre>"},{"location":"#create-edges","title":"Create edges","text":"<p>Create Graph Edges</p> <pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-4', source='3', target='4', label='knows', properties={'since': '2015'})\napi.create_edge(id='4-5', source='4', target='5', label='knows', properties={'since': '2021'})\napi.create_edge(id='5-1', source='5', target='1', label='knows', properties={'since': '2019'})\n</code></pre>"},{"location":"#generate-embeddings","title":"Generate embeddings","text":"<p>Apply Embeddding on graphs</p> <pre><code>api.graph.generate_embeddings(method=\"simple\", dimensions=64)\nembeddings = {node_id: api.graph.get_embedding(node_id) for node_id in api.graph.nodes}\nvector_db.add_vectors(list(embeddings.values()), list(map(int, embeddings.keys())))\n</code></pre>"},{"location":"#query-embeddings","title":"Query embeddings","text":"<pre><code>query_results = vector_db.query_vectors(api.graph.get_embedding('1'), k=2)\nprint(\"Query results:\", query_results)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p><code>docs/installation.md</code>:</p> <p>```markdown</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>To install My Graph Library, use pip:</p> <p>```sh pip install euler-database</p>"},{"location":"usage/","title":"Usage","text":"<p><code>usage.md</code>:</p> <p>```markdown</p>"},{"location":"usage/#usage","title":"Usage","text":"<p>This section provides examples of how to use My Graph Library.</p>"},{"location":"usage/#quick-start","title":"Quick Start","text":"<p>```python from my_graph_lib.graph_api import KnowledgeGraphAPI from my_graph_lib.faiss_db import FaissVectorDB</p> <p>api = KnowledgeGraphAPI() vector_db = FaissVectorDB(dimension=64)</p> <p>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})</p>"},{"location":"usage/#add-more-nodes-and-edges","title":"Add more nodes and edges...","text":"<p>api.graph.generate_embeddings(method=\"simple\", dimensions=64) embeddings = {node_id: api.graph.get_embedding(node_id) for node_id in api.graph.nodes} vector_db.add_vectors(list(embeddings.values()), list(map(int, embeddings.keys())))</p> <p>query_results = vector_db.query_vectors(api.graph.get_embedding('1'), k=2) print(\"Query results:\", query_results)</p>"},{"location":"api_reference/embeddings/simple/","title":"Simple Graph Embeddings","text":""},{"location":"api_reference/embeddings/simple/#introduction","title":"Introduction","text":"<p>Graph embeddings are a way of representing graph nodes, edges, or entire graphs as vectors in a continuous vector space. This transformation allows the application of various machine learning algorithms directly on the graph data. The goal of graph embeddings is to capture the graph's structural and relational information in a lower-dimensional space.</p>"},{"location":"api_reference/embeddings/simple/#mathematical-definition","title":"Mathematical Definition","text":"<p>Given a graph ( G = (V, E) ), where ( V ) is the set of vertices and ( E ) is the set of edges, a graph embedding is a function ( f: V \\rightarrow \\mathbb{R}^d ) that maps each node to a ( d )-dimensional vector.</p>"},{"location":"api_reference/embeddings/simple/#objective","title":"Objective","text":"<p>The objective of graph embedding is to ensure that nodes that are close in the graph are also close in the embedding space. This can be mathematically formulated as minimizing the following objective function:</p> <p>[ \\min \\sum_{(u, v) \\in E} \\text{distance}(f(u), f(v)) ]</p> <p>where ( \\text{distance} ) is typically the Euclidean distance between the vectors ( f(u) ) and ( f(v) ).</p>"},{"location":"api_reference/embeddings/simple/#simple-embeddings","title":"Simple Embeddings","text":"<p>A simple approach to generate graph embeddings is to use random embeddings or basic aggregation techniques. One such technique is to initialize each node's embedding randomly and then optimize it using gradient descent to minimize the objective function.</p>"},{"location":"api_reference/embeddings/simple/#random-initialization","title":"Random Initialization","text":"<p>For a graph with ( N ) nodes, initialize a matrix ( W \\in \\mathbb{R}^{N \\times d} ) where each entry ( W_{i,j} ) is sampled from a normal distribution ( \\mathcal{N}(0, \\sigma^2) ).</p>"},{"location":"api_reference/embeddings/simple/#optimization","title":"Optimization","text":"<p>The embeddings can be further refined using optimization techniques such as stochastic gradient descent (SGD) to minimize the objective function.</p>"},{"location":"api_reference/embeddings/simple/#example-code","title":"Example Code","text":"<p>Below is an example code that demonstrates how to generate simple graph embeddings using random initialization.</p> <pre><code>from euler.graph_api import KnowledgeGraphAPI\napi = KnowledgeGraphAPI()\n</code></pre>"},{"location":"api_reference/embeddings/simple/#create-more-nodes","title":"Create more nodes","text":"<pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\n</code></pre>"},{"location":"api_reference/embeddings/simple/#create-edges","title":"Create edges","text":"<pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-1', source='3', target='4', label='knows', properties={'since': '2015'})\n</code></pre>"},{"location":"api_reference/embeddings/simple/#convert-graph-into-graph","title":"convert graph into Graph  <pre><code>network_graph = api.graph.to_networkx()\n</code></pre>","text":""},{"location":"api_reference/embeddings/simple/#generate-a-simple-embeddings","title":"Generate a simple embeddings <pre><code>api.graph.generate_embeddings(network_graph, method=\"simple\", dimensions=64)\nsimple_embedding = api.graph.get_embedding('1')\nprint(\"Simple embedding for node '1':\", simple_embedding)\n</code></pre>","text":""},{"location":"api_reference/llm/gemini/","title":"Gemini LLM","text":""},{"location":"api_reference/llm/huggingface/","title":"HugginFace","text":""}]}