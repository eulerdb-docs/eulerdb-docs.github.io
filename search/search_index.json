{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Euler Graph Database","text":"<p>Welcome to the official documentation for the Euler Graph Database.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Manage nodes and edges in a graph</li> <li>Generate embeddings using various methods</li> <li>Store and query embeddings using FAISS</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with the Euler Graph Database, follow these steps:</p> <pre><code>from my_graph_lib.graph_api import KnowledgeGraphAPI\nfrom my_graph_lib.faiss_db import FaissVectorDB\n\n# Initialize API and Vector DB\napi = KnowledgeGraphAPI()\nvector_db = FaissVectorDB(dimension=64)\n</code></pre>"},{"location":"#create-nodes","title":"Create nodes","text":"<p>Create Graph nodes </p> <pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\napi.create_node(id='4', label='Person', properties={'name': 'David', 'age': 40})\napi.create_node(id='5', label='Person', properties={'name': 'Eve', 'age': 28})\n</code></pre>"},{"location":"#create-edges","title":"Create edges","text":"<p>Create Graph Edges</p> <pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-4', source='3', target='4', label='knows', properties={'since': '2015'})\napi.create_edge(id='4-5', source='4', target='5', label='knows', properties={'since': '2021'})\napi.create_edge(id='5-1', source='5', target='1', label='knows', properties={'since': '2019'})\n</code></pre>"},{"location":"#generate-embeddings","title":"Generate embeddings","text":"<p>Apply Embeddding on graphs</p> <pre><code>api.graph.generate_embeddings(method=\"simple\", dimensions=64)\nembeddings = {node_id: api.graph.get_embedding(node_id) for node_id in api.graph.nodes}\nvector_db.add_vectors(list(embeddings.values()), list(map(int, embeddings.keys())))\n</code></pre>"},{"location":"#query-embeddings","title":"Query embeddings","text":"<pre><code>query_results = vector_db.query_vectors(api.graph.get_embedding('1'), k=2)\nprint(\"Query results:\", query_results)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p><code>docs/installation.md</code>:</p> <p>```markdown</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>To install My Graph Library, use pip:</p> <p>```sh pip install euler-database</p>"},{"location":"usage/","title":"Usage","text":"<p><code>usage.md</code>:</p> <p>```markdown</p>"},{"location":"usage/#usage","title":"Usage","text":"<p>This section provides examples of how to use My Graph Library.</p>"},{"location":"usage/#quick-start","title":"Quick Start","text":"<p>```python from my_graph_lib.graph_api import KnowledgeGraphAPI from my_graph_lib.faiss_db import FaissVectorDB</p> <p>api = KnowledgeGraphAPI() vector_db = FaissVectorDB(dimension=64)</p> <p>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})</p>"},{"location":"usage/#add-more-nodes-and-edges","title":"Add more nodes and edges...","text":"<p>api.graph.generate_embeddings(method=\"simple\", dimensions=64) embeddings = {node_id: api.graph.get_embedding(node_id) for node_id in api.graph.nodes} vector_db.add_vectors(list(embeddings.values()), list(map(int, embeddings.keys())))</p> <p>query_results = vector_db.query_vectors(api.graph.get_embedding('1'), k=2) print(\"Query results:\", query_results)</p>"},{"location":"api_reference/embeddings/node2vec/","title":"Node2Vec Graph Embeddings","text":""},{"location":"api_reference/embeddings/node2vec/#introduction","title":"Introduction","text":"<p>Node2Vec is a popular algorithm for generating vector representations of nodes in a graph. It aims to capture the network structure by performing biased random walks on the graph and then applying the Skip-Gram model from natural language processing to generate node embeddings. These embeddings can be used for various downstream tasks such as node classification, link prediction, and clustering.</p>"},{"location":"api_reference/embeddings/node2vec/#mathematical-definition","title":"Mathematical Definition","text":"<p>Given a graph ( G = (V, E) ), where ( V ) is the set of vertices and ( E ) is the set of edges, Node2Vec generates embeddings by optimizing the following objective function: <pre><code>\\[ \\max \\sum_{u \\in V} \\sum_{v \\in N_S(u)} \\log \\Pr(v | u) \\]\n</code></pre> where ( N_S(u) ) is a set of nodes sampled from random walks starting at node ( u ), and ( \\Pr(v | u) ) is the conditional probability of node ( v ) given node ( u ).</p>"},{"location":"api_reference/embeddings/node2vec/#conditional-probability","title":"Conditional Probability","text":"<p>The conditional probability ( \\Pr(v | u) ) is defined using the Softmax function: <pre><code>\\[ \\Pr(v | u) = \\frac{\\exp(\\mathbf{z}_v \\cdot \\mathbf{z}_u)}{\\sum_{v' \\in V} \\exp(\\mathbf{z}_{v'} \\cdot \\mathbf{z}_u)} \\]\n</code></pre> where ( \\mathbf{z}_u ) and ( \\mathbf{z}_v ) are the embedding vectors of nodes ( u ) and ( v ), respectively.</p>"},{"location":"api_reference/embeddings/node2vec/#random-walks","title":"Random Walks","text":"<p>Node2Vec generates random walks to capture the graph structure. These walks are controlled by two parameters:</p> <ul> <li>Return parameter ( p ): Controls the likelihood of returning to the previous node in the walk.</li> <li>In-out parameter ( q ): Controls the likelihood of exploring outward nodes.</li> </ul>"},{"location":"api_reference/embeddings/node2vec/#transition-probability","title":"Transition Probability","text":"<p>The transition probability from node ( t ) to node ( v ) given the previous node ( s ) is defined as: <pre><code>\\[ \\alpha_{pq}(t, v) = \n\\begin{cases} \n1/p &amp; \\text{if } d_{t,v} = 0 \\\\\n1 &amp; \\text{if } d_{t,v} = 1 \\\\\n1/q &amp; \\text{if } d_{t,v} = 2 \n\\end{cases}\n\\]\n</code></pre> where ( d_{t,v} ) is the shortest path distance between nodes ( t ) and ( v ).</p>"},{"location":"api_reference/embeddings/node2vec/#skip-gram-model","title":"Skip-Gram Model","text":"<p>The Skip-Gram model is used to optimize the embeddings by maximizing the probability of observing a node's neighbors in random walks. The objective function is: <pre><code>\\[ \\max \\sum_{u \\in V} \\sum_{v \\in N_S(u)} \\log \\Pr(v | u) \\]\n</code></pre></p>"},{"location":"api_reference/embeddings/node2vec/#example-code","title":"Example Code","text":"<p>Below is an example code that demonstrates how to generate Node2Vec embeddings using the <code>node2vec</code> Python package.</p> <pre><code>from euler.graph_api import KnowledgeGraphAPI\napi = KnowledgeGraphAPI()\n</code></pre>"},{"location":"api_reference/embeddings/node2vec/#create-more-nodes","title":"Create more nodes","text":"<pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\n</code></pre>"},{"location":"api_reference/embeddings/node2vec/#create-edges","title":"Create edges","text":"<pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-1', source='3', target='4', label='knows', properties={'since': '2015'})\n</code></pre>"},{"location":"api_reference/embeddings/node2vec/#convert-graph-into-graph","title":"convert graph into Graph  <pre><code>network_graph = api.graph.to_networkx()\n</code></pre>","text":""},{"location":"api_reference/embeddings/node2vec/#create-node2vec-embeddings","title":"Create Node2Vec Embeddings <pre><code>api.graph.generate_embeddings(network_graph, method=\"node2vec\", dimensions=64, walk_length=30, num_walks=200, workers=4)\nnode2vec_embedding = api.graph.get_embedding('1')\nprint(\"Node2Vec embedding for node '1':\", node2vec_embedding)\n</code></pre>","text":""},{"location":"api_reference/embeddings/simple/","title":"Simple Graph Embeddings","text":""},{"location":"api_reference/embeddings/simple/#introduction","title":"Introduction","text":"<p>Graph embeddings are a way of representing graph nodes, edges, or entire graphs as vectors in a continuous vector space. This transformation allows the application of various machine learning algorithms directly on the graph data. The goal of graph embeddings is to capture the graph's structural and relational information in a lower-dimensional space.</p>"},{"location":"api_reference/embeddings/simple/#mathematical-definition","title":"Mathematical Definition","text":"<p>Given a graph ( G = (V, E) ), where ( V ) is the set of vertices and ( E ) is the set of edges, a graph embedding is a function ( f: V \\rightarrow \\mathbb{R}^d ) that maps each node to a ( d )-dimensional vector.</p>"},{"location":"api_reference/embeddings/simple/#objective","title":"Objective","text":"<p>The objective of graph embedding is to ensure that nodes that are close in the graph are also close in the embedding space. This can be mathematically formulated as minimizing the following objective function: <pre><code>\\[ \\min \\sum_{(u, v) \\in E} \\text{distance}(f(u), f(v)) \\]\n</code></pre> where ( \\text{distance} ) is typically the Euclidean distance between the vectors ( f(u) ) and ( f(v) ).</p>"},{"location":"api_reference/embeddings/simple/#simple-embeddings","title":"Simple Embeddings","text":"<p>A simple approach to generate graph embeddings is to use random embeddings or basic aggregation techniques. One such technique is to initialize each node's embedding randomly and then optimize it using gradient descent to minimize the objective function.</p>"},{"location":"api_reference/embeddings/simple/#random-initialization","title":"Random Initialization","text":"<pre><code>For a graph with \\( N \\) nodes, initialize a matrix \\( W \\in \\mathbb{R}^{N \\times d} \\) where each entry \\( W_{i,j} \\) is sampled from a normal distribution \\( \\mathcal{N}(0, \\sigma^2) \\).\n</code></pre>"},{"location":"api_reference/embeddings/simple/#optimization","title":"Optimization","text":"<p>The embeddings can be further refined using optimization techniques such as stochastic gradient descent (SGD) to minimize the objective function.</p>"},{"location":"api_reference/embeddings/simple/#example-code","title":"Example Code","text":"<p>Below is an example code that demonstrates how to generate simple graph embeddings using random initialization.</p> <pre><code>from euler.graph_api import KnowledgeGraphAPI\napi = KnowledgeGraphAPI()\n</code></pre>"},{"location":"api_reference/embeddings/simple/#create-more-nodes","title":"Create more nodes","text":"<pre><code>api.create_node(id='1', label='Person', properties={'name': 'Alice', 'age': 30})\napi.create_node(id='2', label='Person', properties={'name': 'Bob', 'age': 35})\napi.create_node(id='3', label='Person', properties={'name': 'Charlie', 'age': 25})\n</code></pre>"},{"location":"api_reference/embeddings/simple/#create-edges","title":"Create edges","text":"<pre><code>api.create_edge(id='1-2', source='1', target='2', label='knows', properties={'since': '2020'})\napi.create_edge(id='2-3', source='2', target='3', label='knows', properties={'since': '2018'})\napi.create_edge(id='3-1', source='3', target='4', label='knows', properties={'since': '2015'})\n</code></pre>"},{"location":"api_reference/embeddings/simple/#convert-graph-into-graph","title":"convert graph into Graph  <pre><code>network_graph = api.graph.to_networkx()\n</code></pre>","text":""},{"location":"api_reference/embeddings/simple/#generate-a-simple-embeddings","title":"Generate a simple embeddings <pre><code>api.graph.generate_embeddings(network_graph, method=\"simple\", dimensions=64)\nsimple_embedding = api.graph.get_embedding('1')\nprint(\"Simple embedding for node '1':\", simple_embedding)\n</code></pre>","text":""},{"location":"api_reference/llm/gemini/","title":"Gemini LLM","text":""},{"location":"api_reference/llm/huggingface/","title":"HugginFace","text":""}]}